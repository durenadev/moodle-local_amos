{"version":3,"file":"translator.min.js","sources":["../src/translator.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JS module for the AMOS translator.\n *\n * @module      local_amos/translator\n * @copyright   2020 David Mudr√°k <david@moodle.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport Config from 'core/config';\nimport Notification from 'core/notification';\nimport * as PubSub from 'core/pubsub';\nimport FilterEvents from './filter_events';\nimport TranslatorEvents from './translator_events';\nimport Templates from 'core/templates';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\n/**\n * @function init\n */\nexport const init = () => {\n    registerEventListeners();\n    turnAllMissingForEditing();\n\n    PubSub.subscribe(FilterEvents.submit, filterquery => {\n        showFilteredStrings(filterquery);\n    });\n};\n\n/**\n * @function registerEventListeners\n */\nconst registerEventListeners = () => {\n    let root = document.getElementById('amostranslator');\n\n    root.addEventListener('click', e => {\n        // Check to see if the user clicked on a translation to edit it.\n        if (e.target.classList.contains('amostranslation') || e.target.classList.contains('amostranslationview')) {\n            let item = e.target.closest('[data-region=\"amostranslatoritem\"].translatable');\n\n            if (item.getAttribute('data-mode') == 'view') {\n                translatorItemEditingOn(item, e.ctrlKey).focus();\n                return;\n            }\n        }\n\n        // String history timeline link.\n        if (e.target.hasAttribute('data-region') && e.target.getAttribute('data-region') == 'timelinelink') {\n            let item = e.target.closest('[data-region=\"amostranslatoritem\"]');\n            e.preventDefault();\n            showTimeline(item);\n            return;\n        }\n\n        // Marking translation as up-to-date.\n        if (e.target.hasAttribute('data-region') && e.target.getAttribute('data-region') == 'markuptodatelink') {\n            let item = e.target.closest('[data-region=\"amostranslatoritem\"]');\n            e.preventDefault();\n            markUpToDate(item);\n            return;\n        }\n\n\n        // Check to see if the user clicked on paginator link.\n        let paginatorlink = e.target.closest('[data-paginatorlink]');\n        if (paginatorlink) {\n            e.preventDefault();\n            PubSub.publish(TranslatorEvents.pagechange, paginatorlink.getAttribute('data-paginatorlink'));\n        }\n    });\n\n    root.addEventListener('blur', e => {\n        if (e.target.hasAttribute('data-region') && e.target.getAttribute('data-region') == 'amoseditor') {\n            translatorItemSave(e.target);\n        }\n    }, true);\n};\n\n/**\n * @function translatorItemEditingOn\n * @param {Element} item\n * @param {bool} [nocleaning=false] - turn editing on with nocleaning enabled\n * @param {int} [tabIndex=0] - tabIndex value to set to the textarea\n * @return {Element}\n */\nconst translatorItemEditingOn = (item, nocleaning = false, tabIndex = 0) => {\n    let textarea = item.querySelector('[data-region=\"amoseditor\"]');\n    let refHeight = item.querySelector('.amostranslation').clientHeight;\n\n    item.setAttribute('data-nocleaning', nocleaning ? '1' : '0');\n    textarea.setAttribute('data-previous', textarea.value);\n\n    if (tabIndex > 0) {\n        textarea.tabIndex = tabIndex;\n    }\n\n    if (refHeight > 40) {\n        textarea.style.height = (refHeight - 9) + 'px';\n    }\n\n    item.setAttribute('data-mode', 'edit');\n\n    return textarea;\n};\n\n/**\n * @function translatorItemSave\n * @param {Element} textarea\n * @return {Promise}\n */\nconst translatorItemSave = (textarea) => {\n    let item = textarea.closest('[data-region=\"amostranslatoritem\"]');\n    let nocleaning = item.getAttribute('data-nocleaning');\n    let previoustext = textarea.getAttribute('data-previous');\n    let newtext = textarea.value;\n\n    if (nocleaning !== '1') {\n        newtext = newtext.trim();\n    }\n\n    if (previoustext === newtext && nocleaning !== '1') {\n        // Remove eventually added trailing/heading whitespace and just switch back.\n        textarea.value = previoustext;\n        item.setAttribute('data-mode', 'view');\n\n        return Promise.resolve(false);\n\n    } else {\n        // Send the translation to the stage if the translation has changed or nocleaning applies.\n        item.classList.add('staged');\n        item.classList.remove('outdated');\n        textarea.disabled = true;\n\n        return stageTranslatedString(item, newtext)\n\n        .then(response => {\n            item.setAttribute('data-mode', 'view');\n            textarea.disabled = false;\n            textarea.removeAttribute('data-previous');\n            textarea.innerHTML = textarea.value = response.translation;\n            item.querySelector('[data-region=\"amostranslationview\"]').innerHTML = response.displaytranslation;\n            item.querySelector('[data-region=\"displaytranslationsince\"]').innerHTML = response.displaytranslationsince + ' | ';\n            item.querySelector('[data-region=\"markuptodatelink\"]')?.remove();\n\n            return true;\n\n        }).catch(Notification.exception);\n    }\n};\n\n/**\n * @function stageTranslatedString\n * @param {Element} item\n * @param {string} text\n * @returns {Promise}\n */\nconst stageTranslatedString = (item, text) => {\n\n    return fetchMany([{\n        methodname: 'local_amos_stage_translated_string',\n        args: {\n            stageid: Config.sesskey,\n            originalid: item.getAttribute('data-originalid'),\n            lang: item.getAttribute('data-language'),\n            text: text,\n            translationid: parseInt(item.getAttribute('data-translationid')) || 0,\n            nocleaning: item.getAttribute('data-nocleaning'),\n        },\n    }])[0];\n};\n\n/**\n * @function turnAllMissingForEditing\n */\nconst turnAllMissingForEditing = () => {\n    let root = document.getElementById('amostranslator');\n    let missingItems = root.querySelectorAll(':scope [data-region=\"amostranslatoritem\"].translatable.missing');\n    missingItems.forEach((item, index) => {\n        translatorItemEditingOn(item, false, index + 1);\n    });\n};\n\n/**\n * @function showFilteredStrings\n *\n * @param {Object} filterQuery\n */\nconst showFilteredStrings = (filterQuery) => {\n\n    let root = document.getElementById('amostranslator');\n    let loadingIndicator = document.getElementById('amosfilter_loading_indicator');\n\n    root.classList.add('loading');\n\n    return fetchMany([{\n        methodname: 'local_amos_get_translator_data',\n        args: {\n            filterquery: filterQuery,\n        },\n\n    }])[0].then(response => {\n        try {\n            let data = JSON.parse(response.json);\n            return Templates.render('local_amos/translator_root', data);\n\n        } catch (error) {\n            return Promise.reject(error);\n        }\n\n    }).then((html, js = '') => {\n        return Templates.replaceNodeContents(root, html, js);\n\n    }).then(() => {\n        turnAllMissingForEditing();\n        loadingIndicator.classList.add('hidden');\n        root.classList.remove('loading');\n        return true;\n\n    }).catch(Notification.exception);\n};\n\n/**\n * @function showTimeline\n * @param {Element} item\n */\nconst showTimeline = (item) => {\n    let modalTitle = '';\n    return fetchMany([{\n        methodname: 'local_amos_get_string_timeline',\n        args: {\n            component: item.getAttribute('data-component'),\n            language: item.getAttribute('data-language'),\n            strname: item.getAttribute('data-stringid'),\n        },\n\n    }])[0].then(response => {\n        modalTitle = getString('timelineheading', 'local_amos', response);\n        return Templates.render('local_amos/timeline', response);\n\n    }).then((html) => {\n        return ModalFactory.create({\n            large: true,\n            title: modalTitle,\n            body: html,\n        });\n\n    }).then(modal => {\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            modal.destroy();\n        });\n\n        modal.show();\n\n        return modal;\n\n    }).catch(Notification.exception);\n};\n\n/**\n * @function markUpToDate\n * @param {Element} item\n */\nconst markUpToDate = (item) => {\n    return fetchMany([{\n        methodname: 'local_amos_make_translation_uptodate',\n        args: {\n            originalid: item.getAttribute('data-originalid'),\n            translationid: item.getAttribute('data-translationid'),\n        },\n\n    }])[0].then(response => {\n        item.classList.remove('outdated');\n        item.setAttribute('data-translationid', response.translationid);\n        item.querySelector('[data-region=\"displaytranslationsince\"]').innerHTML = response.displaytranslationsince + ' | ';\n        item.querySelector('[data-region=\"markuptodatelink\"]').remove();\n\n    }).catch(Notification.exception);\n};\n"],"names":["registerEventListeners","turnAllMissingForEditing","PubSub","subscribe","FilterEvents","submit","filterquery","showFilteredStrings","root","document","getElementById","addEventListener","e","target","classList","contains","item","closest","getAttribute","translatorItemEditingOn","ctrlKey","focus","hasAttribute","preventDefault","showTimeline","markUpToDate","paginatorlink","publish","TranslatorEvents","pagechange","translatorItemSave","nocleaning","tabIndex","textarea","querySelector","refHeight","clientHeight","setAttribute","value","style","height","previoustext","newtext","trim","Promise","resolve","add","remove","disabled","stageTranslatedString","then","response","removeAttribute","innerHTML","translation","displaytranslation","displaytranslationsince","catch","Notification","exception","text","methodname","args","stageid","Config","sesskey","originalid","lang","translationid","parseInt","querySelectorAll","forEach","index","filterQuery","loadingIndicator","data","JSON","parse","json","Templates","render","error","reject","html","js","replaceNodeContents","modalTitle","component","language","strname","ModalFactory","create","large","title","body","modal","getRoot","on","ModalEvents","hidden","destroy","show"],"mappings":"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"}